# Generates code for a socket-sysl app and/or service.

let sysl = //{./../../sysl/pkg/arrai/sysl};
let raw = sysl.load('model.pb');
let model = sysl.normalize(raw);
let config = (host: 'localhost', port: 3001);
let args = (:model, :config);

# Endpoints with event subscriptions.
let subApps = (model.endpoints where .isSub nest ~|appName|subEps) <&> model.apps;

let out = {
    'gen': subApps => \(:appName, :appPatterns, :subEps, ...)
        let args = args +> (:appName);
        (
            @: $`${appName::}`,
            @value: cond {
                {'web', 'client'} (<=) appPatterns: {
                    'index.html': //{./web/index.html.arrai}(args),
                    'app.js': //{./web/app.js.arrai}(args),
                    'net.js': //{./web/net.js.arrai}(args),
                    'ui.js': //{./web/ui.js.arrai}(args),
                },
                _: {
                    'app.go': //{./go/app.go.arrai}(args),
                    'service.go': //{./go/service.go.arrai}(args),
                    'serviceinterface.go': //{./go/serviceinterface.go.arrai}(args),
                }
            }
        )
    ,
};

out
