let go = //{./go};

\(:model, :appName, ...)
	let package = //str.lower(//seq.join('', appName));
	let apps = {appName} | (model.calls where .from.appName = appName => .to.appName);
	let types = model.types where .appName <: apps;
	let types = types <&> model.fields nest ~|appName,typeName,typeType|fields;
	let unions = model.types where .typeType = 'one_of';
	let events = (model.events where .appName = appName) where .eventName !<: (types => .typeName);
	
	$`
// Code generated by socket-sysl. DO NOT EDIT.

package ${package}

${types => $'
	type ${//str.title(.typeName)} struct {
		${.fields => $'
			${//str.title(.fieldName)} ${go.type(.)} `json:"${.fieldName}"`
		' orderby .::\i}
	}
' orderby .::\i\n}

${unions => $'
	type ${//str.title(.typeName)} interface{}
' orderby .::\i\n}

${events => $`
	type ${.eventName} struct{}
` orderby .::\i\n}
`
